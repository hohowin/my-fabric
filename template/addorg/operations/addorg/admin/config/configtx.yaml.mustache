################################################################################
#
#   Section: Organizations
#
#   - This section defines the different organizational identities which will
#   be referenced later in the configuration.
#
################################################################################
Organizations:

   - &{{orgs.orderer.name}}
      # Name is the key by which this org will be referenced in channel
      # configuration transactions.
      # Name can include alphanumeric characters as well as dots and dashes.
      Name: {{orgs.orderer.name}}

      # ID is the key by which this org's MSP definition will be referenced.
      # ID can include alphanumeric characters as well as dots and dashes.
      ID: {{orgs.orderer.id}}

      # MSPDir is the filesystem path which contains the MSP configuration
      MSPDir: {{{artifacts.local}}}/{{{artifacts.crypto}}}{{#artifacts.crypto}}/{{/artifacts.crypto}}{{{orgs.orderer.msp-path}}}

      # Policies defines the set of policies at this level of the config tree
      # For organization policies, their canonical path is usually
      #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
      Policies:
         Readers:
            # If your MSP is configured with the new NodeOUs, you might
            # want to use a more specific rule like the following:
            # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
            Type: Signature
            Rule: "OR('{{orgs.orderer.id}}.member')"
         Writers:
            Type: Signature
            Rule: "OR('{{orgs.orderer.id}}.member')"
         Admins:
            Type: Signature
            Rule: "OR('{{orgs.orderer.id}}.admin')"

   {{#orgs.peer}}
   - &{{name}}

      Name: {{name}}

      # ID to load the MSP definition as
      ID: {{id}}

      # MSPDir is the filesystem path which contains the MSP configuration
      MSPDir: {{{artifacts.local}}}/{{{artifacts.crypto}}}{{#artifacts.crypto}}/{{/artifacts.crypto}}{{{msp-path}}}

      Policies:
         Readers:
            Type: Signature
            Rule: "OR('{{id}}.member')"
         Writers:
            Type: Signature
            Rule: "OR('{{id}}.member')"
         Admins:
            Type: Signature
            Rule: "OR('{{id}}.admin')"

      # OrdererEndpoints is a list of all orderers this org runs which clients
      # and peers may to connect to to push transactions and receive blocks respectively.
      OrdererEndpoints:
         {{#orgs.orderer.orderers.endpoints}}
         - {{-}}{{network.host-delimiter}}{{orgs.orderer.domain}}:{{ext-port}}
         {{/orgs.orderer.orderers.endpoints}}

      AnchorPeers:
         # AnchorPeers defines the location of peers which can be used
         # for cross org gossip communication.  Note, this value is only
         # encoded in the genesis block in the Application section context
         - Host: {{peers.anchor}}{{network.host-delimiter}}{{domain}}
           Port: {{peers.anchor-port}}

   {{/orgs.peer}}

################################################################################
#
#   CAPABILITIES
#
#   This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
   # Channel capabilities apply to both the orderers and the peers and must be
   # supported by both.
   # Set the value of the capability to true to require it.
   # Note that setting a later Channel version capability to true will also
   # implicitly set prior Channel version capabilities to true. There is no need
   # to set each version capability to true (prior version capabilities remain
   # in this sample only to provide the list of valid values).
   Channel: &ChannelCapabilities
      V1_4_3: true
      V1_3: false
      V1_1: false

   # Orderer capabilities apply only to the orderers, and may be safely
   # used with prior release peers.
   # Set the value of the capability to true to require it.
   # Note that setting a later Orderer version capability to true will also
   # implicitly set prior Orderer version capabilities to true. There is no need
   # to set each version capability to true (prior version capabilities remain
   # in this sample only to provide the list of valid values).
   Orderer: &OrdererCapabilities
      V1_4_2: true
      V1_1: false
   
   # Application capabilities apply only to the peer network, and may be safely
   # used with prior release orderers.
   # Set the value of the capability to true to require it.
   # Note that setting a later Application version capability to true will also
   # implicitly set prior Application version capabilities to true. There is no need
   # to set each version capability to true (prior version capabilities remain
   # in this sample only to provide the list of valid values).
   Application: &ApplicationCapabilities
      V1_4_2: true
      V1_3: false
      V1_2: false
      V1_1: false

################################################################################
#
#   SECTION: Application
#
#   This section defines the values to encode into a config transaction or
#   genesis block for application related parameters
#
################################################################################
Application: &ApplicationDefaults

   # Organizations is the list of orgs which are defined as participants on
   # the application side of the network
   Organizations:

   # Policies defines the set of policies at this level of the config tree
   # For Application policies, their canonical path is
   #   /Channel/Application/<PolicyName>
   Policies:
      Readers:
         Type: ImplicitMeta
         Rule: "ANY Readers"
      Writers:
         Type: ImplicitMeta
         Rule: "ANY Writers"
      Admins:
         Type: ImplicitMeta
         Rule: "MAJORITY Admins"

   # Capabilities describes the application level capabilities, see the
   # dedicated Capabilities section elsewhere in this file for a full
   # description
   Capabilities:
      <<: *ApplicationCapabilities

################################################################################
#
#   ORDERER
#
#   This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters.
#
################################################################################
Orderer: &OrdererDefaults

   # Orderer Type: The orderer implementation to start.
   # Available types are "solo", "kafka" and "etcdraft".
   OrdererType: {{orgs.orderer.orderers.type}}

   # Addresses used to be the list of orderer addresses that clients and peers
   # could connect to.  However, this does not allow clients to associate orderer
   # addresses and orderer organizations which can be useful for things such
   # as TLS validation.  The preferred way to specify orderer addresses is now
   # to include the OrdererEndpoints item in your org definition
   Addresses:
      {{#orgs.orderer}}
      {{#orderers.endpoints}}
      - {{-}}{{network.host-delimiter}}{{domain}}:{{ext-port}}
      {{/orderers.endpoints}}
      {{/orgs.orderer}}

   # Batch Timeout: The amount of time to wait before creating a batch.
   BatchTimeout: {{orgs.orderer.orderers.batch-timeout}}

   # Batch Size: Controls the number of messages batched into a block.
   # The orderer views messages opaquely, but typically, messages may
   # be considered to be Fabric transactions.  The 'batch' is the group
   # of messages in the 'data' field of the block.  Blocks will be a few kb
   # larger than the batch size, when signatures, hashes, and other metadata
   # is applied.
   BatchSize:

      # Max Message Count: The maximum number of messages to permit in a
      # batch.  No block will contain more than this number of messages.
      MaxMessageCount: {{orgs.orderer.orderers.max-message-count}}

      # Absolute Max Bytes: The absolute maximum number of bytes allowed for
      # the serialized messages in a batch. The maximum block size is this value
      # plus the size of the associated metadata (usually a few KB depending
      # upon the size of the signing identities). Any transaction larger than
      # this value will be rejected by ordering. If the "kafka" OrdererType is
      # selected, set 'message.max.bytes' and 'replica.fetch.max.bytes' on
      # the Kafka brokers to a value that is larger than this one.
      AbsoluteMaxBytes: {{orgs.orderer.orderers.absolute-max-bytes}}

      # Preferred Max Bytes: The preferred maximum number of bytes allowed
      # for the serialized messages in a batch. Roughly, this field may be considered
      # the best effort maximum size of a batch. A batch will fill with messages
      # until this size is reached (or the max message count, or batch timeout is
      # exceeded).  If adding a new message to the batch would cause the batch to
      # exceed the preferred max bytes, then the current batch is closed and written
      # to a block, and a new batch containing the new message is created.  If a
      # message larger than the preferred max bytes is received, then its batch
      # will contain only that message.  Because messages may be larger than
      # preferred max bytes (up to AbsoluteMaxBytes), some batches may exceed
      # the preferred max bytes, but will always contain exactly one transaction.
      PreferredMaxBytes: {{orgs.orderer.orderers.preferred-max-bytes}}

   # Max Channels is the maximum number of channels to allow on the ordering
   # network. When set to 0, this implies no maximum number of channels.
   MaxChannels: {{orgs.orderer.orderers.max-channels}}

   {{#orgs.orderer.orderers.use-kafka}}
   Kafka:
      # Brokers: A list of Kafka brokers to which the orderer connects. Edit
      # this list to identify the brokers of the ordering service.
      # NOTE: Use IP:port notation.
      Brokers:
         {{#orgs.orderer.kafkas.endpoints}}
         - {{.}}:{{orgs.orderer.kafkas.ports.0}}
         {{/orgs.orderer.kafkas.endpoints}}
   {{/orgs.orderer.orderers.use-kafka}}
   {{#orgs.orderer.orderers.use-raft}}
   # EtcdRaft defines configuration which must be set when the "etcdraft"
   # orderertype is chosen.
   EtcdRaft:
      # The set of Raft replicas for this network. For the etcd/raft-based
      # implementation, we expect every replica to also be an OSN. Therefore,
      # a subset of the host:port items enumerated in this list should be
      # replicated under the Orderer.Addresses key above.
      Consenters:
         {{#orgs.orderer.orderers.endpoints}}
         - Host: {{-}}{{network.host-delimiter}}{{orgs.orderer.domain}}
           Port: {{ext-port}}
           ClientTLSCert: {{{artifacts.local}}}/{{{artifacts.crypto}}}{{#artifacts.crypto}}/{{/artifacts.crypto}}{{{cert-path}}}/tls-msp/signcerts/cert.pem
           ServerTLSCert: {{{artifacts.local}}}/{{{artifacts.crypto}}}{{#artifacts.crypto}}/{{/artifacts.crypto}}{{{cert-path}}}/tls-msp/signcerts/cert.pem
         {{/orgs.orderer.orderers.endpoints}}

      # Options to be specified for all the etcd/raft nodes. The values here
      # are the defaults for all new channels and can be modified on a
      # per-channel basis via configuration updates.
      Options:
         # TickInterval is the time interval between two Node.Tick invocations.
         TickInterval: {{orgs.orderer.orderers.raft-tick-interval}}

         # ElectionTick is the number of Node.Tick invocations that must pass
         # between elections. That is, if a follower does not receive any
         # message from the leader of current term before ElectionTick has
         # elapsed, it will become candidate and start an election.
         # ElectionTick must be greater than HeartbeatTick.
         ElectionTick: {{orgs.orderer.orderers.raft-election-tick}}

         # HeartbeatTick is the number of Node.Tick invocations that must
         # pass between heartbeats. That is, a leader sends heartbeat
         # messages to maintain its leadership every HeartbeatTick ticks.
         HeartbeatTick: {{orgs.orderer.orderers.raft-heartbeat-tick}}

         # MaxInflightBlocks limits the max number of in-flight append messages
         # during optimistic replication phase.
         MaxInflightBlocks: {{orgs.orderer.orderers.raft-max-inflight-blocks}}

         # SnapshotIntervalSize defines number of bytes per which a snapshot is taken
         SnapshotIntervalSize: {{orgs.orderer.orderers.raft-snapshot-interval-size}}
   {{/orgs.orderer.orderers.use-raft}}

   # Organizations lists the orgs participating on the orderer side of the
   # network.
   Organizations:

   # Policies defines the set of policies at this level of the config tree
   # For Orderer policies, their canonical path is
   #   /Channel/Orderer/<PolicyName>
   Policies:
      # Who may invoke the 'Deliver' API
      Readers:
         Type: ImplicitMeta
         Rule: "ANY Readers"
      # Who may invoke the 'Broadcast' API
      Writers:
         Type: ImplicitMeta
         Rule: "ANY Writers"
      # By default, who may modify elements at this config level
      Admins:
         Type: ImplicitMeta
         Rule: "MAJORITY Admins"
      # BlockValidation specifies what signatures must be included in the block
      # from the orderer for the peer to validate it.
      BlockValidation:
         Type: ImplicitMeta
         Rule: "ANY Writers"

Channel: &ChannelDefaults
   Policies:
      Readers:
         Type: ImplicitMeta
         Rule: "ANY Readers"
      Writers:
         Type: ImplicitMeta
         Rule: "ANY Writers"
      Admins:
         Type: ImplicitMeta
         Rule: "MAJORITY Admins"

   Capabilities:
      <<: *ChannelCapabilities

################################################################################
#
#   Profile
#
#   Different configuration profiles may be encoded here to be specified as
#   parameters to the configtxgen tool. The profiles which specify consortiums
#   are to be used for generating the orderer genesis block. With the correct
#   consortium members defined in the orderer genesis block, channel creation
#   requests may be generated with only the org member names and a consortium
#   name.
#
################################################################################
Profiles:

   OrgsOrdererGenesis:
      <<: *ChannelDefaults
      Orderer:
         <<: *OrdererDefaults
         Organizations:
            - *{{orgs.orderer.name}}
         Capabilities:
            <<: *OrdererCapabilities
      Consortiums:
         {{network.consortium}}:
            Organizations:
               {{#orgs.peer}}
               - *{{name}}
               {{/orgs.peer}}

   OrgsChannel:
      Consortium: {{network.consortium}}
      <<: *ChannelDefaults
      Application:
         <<: *ApplicationDefaults
         Organizations:
            {{#orgs.peer}}
            - *{{name}}
            {{/orgs.peer}}
         Capabilities:
            <<: *ApplicationCapabilities
